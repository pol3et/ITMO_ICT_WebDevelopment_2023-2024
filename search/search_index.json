{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Lab 1 \u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c! \u041f\u043e\u0447\u0435\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0435\u0440\u0443\u0442 \u0441 \u0441\u043e\u0431\u043e\u0439 \u0437\u043e\u043d\u0442\u0438\u043a? \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u0434\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u043b\u0430\u0431\u044b \u0431\u0443\u0434\u0435\u0442 \u043b\u0438\u0442\u044c \u043a\u043e\u0434 :) \u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435 \u0417\u0430\u0434\u0430\u0447\u0430 1: \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0417\u0430\u0434\u0430\u0447\u0430 2: \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0417\u0430\u0434\u0430\u0447\u0430 3: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0417\u0430\u0434\u0430\u0447\u0430 4: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 RESTful API \u0417\u0430\u0434\u0430\u0447\u0430 5: \u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u041c\u0430\u0437\u0435\u0438\u043d \u041d\u0438\u043a\u0438\u0442\u0430","title":"Home"},{"location":"#lab-1","text":"\u0414\u043e\u0431\u0440\u043e \u043f\u043e\u0436\u0430\u043b\u043e\u0432\u0430\u0442\u044c! \u041f\u043e\u0447\u0435\u043c\u0443 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0441\u0442\u044b \u0432\u0441\u0435\u0433\u0434\u0430 \u0431\u0435\u0440\u0443\u0442 \u0441 \u0441\u043e\u0431\u043e\u0439 \u0437\u043e\u043d\u0442\u0438\u043a? \u041f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044c \u0441\u043a\u0430\u0437\u0430\u043b, \u0447\u0442\u043e \u0434\u043b\u044f \u0437\u0430\u0449\u0438\u0442\u044b \u043b\u0430\u0431\u044b \u0431\u0443\u0434\u0435\u0442 \u043b\u0438\u0442\u044c \u043a\u043e\u0434 :)","title":"\u0414\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044f Lab 1"},{"location":"#_1","text":"\u0417\u0430\u0434\u0430\u0447\u0430 1: \u041f\u0440\u043e\u0441\u0442\u043e\u0435 \u0432\u0437\u0430\u0438\u043c\u043e\u0434\u0435\u0439\u0441\u0442\u0432\u0438\u0435 \u043a\u043b\u0438\u0435\u043d\u0442\u0430 \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0417\u0430\u0434\u0430\u0447\u0430 2: \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0417\u0430\u0434\u0430\u0447\u0430 3: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0431\u0430\u0437\u043e\u0432\u043e\u0439 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0417\u0430\u0434\u0430\u0447\u0430 4: \u0421\u043e\u0437\u0434\u0430\u043d\u0438\u0435 RESTful API \u0417\u0430\u0434\u0430\u0447\u0430 5: \u0418\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u0435 \u0432\u0435\u0431-\u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u043b: \u041c\u0430\u0437\u0435\u0438\u043d \u041d\u0438\u043a\u0438\u0442\u0430","title":"\u0421\u043e\u0434\u0435\u0440\u0436\u0430\u043d\u0438\u0435"},{"location":"task1/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py import socket import signal # Create a UDP socket object s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.bind(('localhost', 1337)) signal.signal(signal.SIGINT, signal.SIG_DFL) while True: # Set timeout s.settimeout(60) try: # Receive data from client data, addr = s.recvfrom(1024) print('Received data from client:', data.decode('utf-8')) # Send data to client data = bytes('Hello, client!', 'utf-8') s.sendto(data, addr) print('Sent data to client:', data.decode('utf-8')) except socket.timeout: print('No data received from client after 60 seconds') break except KeyboardInterrupt: print(\"Server terminated by user.\") break # Close socket s.close() client.py import socket # Create a UDP socket object s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect(('localhost', 1337)) # Send data to server data = bytes('Hello, server!', 'utf-8') s.send(data) print('Sent data to server:', data.decode('utf-8')) # Receive data from server data = s.recv(1024) print('Received data from server:', data.decode('utf-8')) \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b","title":"Task 1"},{"location":"task1/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0421\u0435\u0440\u0432\u0435\u0440 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043e\u0442\u0441\u044b\u043b\u0430\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb. \u0421\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"task1/#_2","text":"server.py import socket import signal # Create a UDP socket object s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.bind(('localhost', 1337)) signal.signal(signal.SIGINT, signal.SIG_DFL) while True: # Set timeout s.settimeout(60) try: # Receive data from client data, addr = s.recvfrom(1024) print('Received data from client:', data.decode('utf-8')) # Send data to client data = bytes('Hello, client!', 'utf-8') s.sendto(data, addr) print('Sent data to client:', data.decode('utf-8')) except socket.timeout: print('No data received from client after 60 seconds') break except KeyboardInterrupt: print(\"Server terminated by user.\") break # Close socket s.close() client.py import socket # Create a UDP socket object s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect(('localhost', 1337)) # Send data to server data = bytes('Hello, server!', 'utf-8') s.send(data) print('Sent data to server:', data.decode('utf-8')) # Receive data from server data = s.recv(1024) print('Received data from server:', data.decode('utf-8'))","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"task1/#_3","text":"","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task2/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py import socket import signal def solve_quadratic_equation(a, b, c): if a == 0 or a is None: return None, None if b == 0 or b is None: return None, None if c == 0 or c is None: return 0, 0 d = b**2 - 4*a*c if d < 0: return None, None x1 = (-b + d**0.5) / (2*a) x2 = (-b - d**0.5) / (2*a) return x1, x2 # Create a TCP socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind(('localhost', 1337)) s.listen(1) signal.signal(signal.SIGINT, signal.SIG_DFL) print(\"Waiting for a connection...\") while True: try: client_socket, client_address = s.accept() print(f\"Accepted connection from {client_address}\") data = client_socket.recv(1024) print('Received data from client:', data.decode('utf-8')) a, b, c = map(int, data.decode('utf-8').split()) x1, x2 = solve_quadratic_equation(a, b, c) if x1 is None: response = 'No real roots' else: response = 'x1 = {}, x2 = {}'.format(x1, x2) client_socket.send(response.encode('utf-8')) print('Sent data to client:', response) client_socket.close() except KeyboardInterrupt: print(\"Server terminated by user.\") break s.close() client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 1337)) while True: a = int(input('Enter a: ')) b = int(input('Enter b: ')) c = int(input('Enter c: ')) data = '{} {} {}'.format(a, b, c) s.send(data.encode('utf-8')) print('Sent data to server:', data) response = s.recv(1024) print('Received data from server:', response.decode('utf-8')) if input('Do you want to continue? [y/n] ') == 'n': break s.close() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b","title":"Task 2"},{"location":"task2/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0443 \u0441\u0435\u0440\u0432\u0435\u0440\u0430 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b, \u043a\u043e\u0442\u043e\u0440\u044b\u0435 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443. \u0412\u0430\u0440\u0438\u0430\u043d\u0442: \u0420\u0435\u0448\u0435\u043d\u0438\u0435 \u043a\u0432\u0430\u0434\u0440\u0430\u0442\u043d\u043e\u0433\u043e \u0443\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f.","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"task2/#_2","text":"server.py import socket import signal def solve_quadratic_equation(a, b, c): if a == 0 or a is None: return None, None if b == 0 or b is None: return None, None if c == 0 or c is None: return 0, 0 d = b**2 - 4*a*c if d < 0: return None, None x1 = (-b + d**0.5) / (2*a) x2 = (-b - d**0.5) / (2*a) return x1, x2 # Create a TCP socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1) s.bind(('localhost', 1337)) s.listen(1) signal.signal(signal.SIGINT, signal.SIG_DFL) print(\"Waiting for a connection...\") while True: try: client_socket, client_address = s.accept() print(f\"Accepted connection from {client_address}\") data = client_socket.recv(1024) print('Received data from client:', data.decode('utf-8')) a, b, c = map(int, data.decode('utf-8').split()) x1, x2 = solve_quadratic_equation(a, b, c) if x1 is None: response = 'No real roots' else: response = 'x1 = {}, x2 = {}'.format(x1, x2) client_socket.send(response.encode('utf-8')) print('Sent data to client:', response) client_socket.close() except KeyboardInterrupt: print(\"Server terminated by user.\") break s.close() client.py import socket s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect(('localhost', 1337)) while True: a = int(input('Enter a: ')) b = int(input('Enter b: ')) c = int(input('Enter c: ')) data = '{} {} {}'.format(a, b, c) s.send(data.encode('utf-8')) print('Sent data to server:', data) response = s.recv(1024) print('Received data from server:', response.decode('utf-8')) if input('Do you want to continue? [y/n] ') == 'n': break s.close()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"task2/#_3","text":"","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task3/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py import socket import signal s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 1337)) s.listen(1) signal.signal(signal.SIGINT, signal.SIG_DFL) def send_html_response(client_socket): with open('index.html', 'rb') as html_file: html_content = html_file.read() response = b\"HTTP/1.1 200 OK\\r\\n\" response += b\"Content-Type: text/html\\r\\n\" response += b\"Content-Length: \" + str(len(html_content)).encode() + b\"\\r\\n\" response += b\"\\r\\n\" response += html_content client_socket.send(response) while True: try: print(\"Waiting for a connection...\") client_socket, client_address = s.accept() print(f\"Accepted connection from {client_address}\") request = client_socket.recv(1024) print(request.decode()) send_html_response(client_socket) client_socket.close() except KeyboardInterrupt: print(\"Server terminated by user.\") break index.html <html> <head> <title>My Page</title> <style> body { background-image: url('https://i.stack.imgur.com/J5xAl.gif'); background-size: cover; background-repeat: no-repeat; } </style> </head> <body> <h1>Welcome to My Page</h1> <p>Click the button below to see some cute dogs:</p> <button onclick=\"showDogs()\">Click Dogs</button> <button onclick=\"removeDogs()\">Remove Dogs</button> <script> function showDogs() { const images = [ 'https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/cute-cat-photos-1593441022.jpg?crop=0.670xw:1.00xh;0.167xw,0&resize=640:*', 'https://bit.ly/fcc-relaxing-cat', 'https://www.everypaw.com/.imaging/mte/everypaw/blog/dam/all-things-pet/buying-a-kitten-heres-what-you-should-look-out-for/buying-a-kitten.jpg/jcr:content/buying-a-kitten.jpg' ]; for (const image of images) { const imgElement = document.createElement('img'); imgElement.src = image; document.body.appendChild(imgElement); } alert('Caugth Ya, DogLovers!') } function removeDogs() { const images = document.querySelectorAll('img'); for (const image of images) { image.remove(); } } </script> </body> </html> \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b","title":"Task 3"},{"location":"task3/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443. \u0412 \u043e\u0442\u0432\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 http-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0443\u044e \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"task3/#_2","text":"server.py import socket import signal s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.bind(('localhost', 1337)) s.listen(1) signal.signal(signal.SIGINT, signal.SIG_DFL) def send_html_response(client_socket): with open('index.html', 'rb') as html_file: html_content = html_file.read() response = b\"HTTP/1.1 200 OK\\r\\n\" response += b\"Content-Type: text/html\\r\\n\" response += b\"Content-Length: \" + str(len(html_content)).encode() + b\"\\r\\n\" response += b\"\\r\\n\" response += html_content client_socket.send(response) while True: try: print(\"Waiting for a connection...\") client_socket, client_address = s.accept() print(f\"Accepted connection from {client_address}\") request = client_socket.recv(1024) print(request.decode()) send_html_response(client_socket) client_socket.close() except KeyboardInterrupt: print(\"Server terminated by user.\") break index.html <html> <head> <title>My Page</title> <style> body { background-image: url('https://i.stack.imgur.com/J5xAl.gif'); background-size: cover; background-repeat: no-repeat; } </style> </head> <body> <h1>Welcome to My Page</h1> <p>Click the button below to see some cute dogs:</p> <button onclick=\"showDogs()\">Click Dogs</button> <button onclick=\"removeDogs()\">Remove Dogs</button> <script> function showDogs() { const images = [ 'https://hips.hearstapps.com/hmg-prod.s3.amazonaws.com/images/cute-cat-photos-1593441022.jpg?crop=0.670xw:1.00xh;0.167xw,0&resize=640:*', 'https://bit.ly/fcc-relaxing-cat', 'https://www.everypaw.com/.imaging/mte/everypaw/blog/dam/all-things-pet/buying-a-kitten-heres-what-you-should-look-out-for/buying-a-kitten.jpg/jcr:content/buying-a-kitten.jpg' ]; for (const image of images) { const imgElement = document.createElement('img'); imgElement.src = image; document.body.appendChild(imgElement); } alert('Caugth Ya, DogLovers!') } function removeDogs() { const images = document.querySelectorAll('img'); for (const image of images) { image.remove(); } } </script> </body> </html>","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"task3/#_3","text":"","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task4/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py import socket import threading import signal clients = {} def handle_client(client_socket, username): try: while True: message = client_socket.recv(1024).decode('utf-8') if not message: break for client, user in clients.items(): if client != client_socket: client.send(f'{username}: {message}'.encode('utf-8')) except Exception as e: print(f\"Error: {e}\") finally: del clients[client_socket] client_socket.close() print(f\"{username} disconnected\") def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 1337)) server_socket.listen(5) signal.signal(signal.SIGINT, signal.SIG_DFL) print(\"Waiting for a connection...\") while True: client_socket, client_address = server_socket.accept() print(f\"Accepted connection from {client_address}\") username = client_socket.recv(1024).decode('utf-8').strip() clients[client_socket] = username client_thread = threading.Thread(target=handle_client, args=(client_socket, username)) client_thread.start() if __name__ == \"__main__\": main() client.py import socket import threading def receive_messages(client_socket): while True: try: incoming_message = client_socket.recv(1024).decode('utf-8') if not incoming_message: break else: print(f\"-{incoming_message.strip()}\") except Exception as e: print(f\"Error receiving message: {e}\") break def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 1337)) username = input(\"Enter your username: \") client_socket.send(username.encode('utf-8')) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.daemon = True # thread dies when main thread (the only non-daemon thread) exits. receive_thread.start() while True: message = input(\"\") client_socket.send(message.encode('utf-8')) if message.lower() == \"exit\": break client_socket.close() if __name__ == \"__main__\": main() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b","title":"Task 4"},{"location":"task4/#_1","text":"\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0441\u0430 \u043f\u043e\u0437\u0432\u043e\u043b\u044f\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0438\u0442\u044c \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0435 \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u043e \u0431\u0430\u043b\u043b\u043e\u0432.","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"task4/#_2","text":"server.py import socket import threading import signal clients = {} def handle_client(client_socket, username): try: while True: message = client_socket.recv(1024).decode('utf-8') if not message: break for client, user in clients.items(): if client != client_socket: client.send(f'{username}: {message}'.encode('utf-8')) except Exception as e: print(f\"Error: {e}\") finally: del clients[client_socket] client_socket.close() print(f\"{username} disconnected\") def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 1337)) server_socket.listen(5) signal.signal(signal.SIGINT, signal.SIG_DFL) print(\"Waiting for a connection...\") while True: client_socket, client_address = server_socket.accept() print(f\"Accepted connection from {client_address}\") username = client_socket.recv(1024).decode('utf-8').strip() clients[client_socket] = username client_thread = threading.Thread(target=handle_client, args=(client_socket, username)) client_thread.start() if __name__ == \"__main__\": main() client.py import socket import threading def receive_messages(client_socket): while True: try: incoming_message = client_socket.recv(1024).decode('utf-8') if not incoming_message: break else: print(f\"-{incoming_message.strip()}\") except Exception as e: print(f\"Error receiving message: {e}\") break def main(): client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) client_socket.connect(('localhost', 1337)) username = input(\"Enter your username: \") client_socket.send(username.encode('utf-8')) receive_thread = threading.Thread(target=receive_messages, args=(client_socket,)) receive_thread.daemon = True # thread dies when main thread (the only non-daemon thread) exits. receive_thread.start() while True: message = input(\"\") client_socket.send(message.encode('utf-8')) if message.lower() == \"exit\": break client_socket.close() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"task4/#_3","text":"","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"task5/","text":"\u0417\u0430\u0434\u0430\u0447\u0430 \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: * \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. * \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b. \u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f server.py import socket import re import signal student_marks = { \"Bob\": [85], \"Tom\": [92], \"Shlick-Shlack\": [78], } html_template = \"\"\" <!DOCTYPE html> <html> <head> <title>Student Marks</title> </head> <body> <h1>Student Marks</h1> <ul> {student_list} </ul> <form method=\"post\" action=\"/\"> <label for=\"name\">Name:</label> <input type=\"text\" id=\"name\" name=\"name\" required> <label for=\"marks\">Marks:</label> <input type=\"number\" id=\"marks\" name=\"marks\" required> <input type=\"submit\" value=\"Submit\"> </form> </body> </html> \"\"\" def generate_student_list(): student_list = \"\" for name, marks in student_marks.items(): mark_str = ', '.join(map(str, marks)) student_list += f'<li> {name} : {mark_str}' return student_list def handle_request(request): print(request) if request.startswith(\"GET\"): response_body = html_template.format(student_list=generate_student_list()) response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(response_body)}\\r\\n\\r\\n{response_body}\" elif request.startswith(\"POST\"): match = re.search(r'name=(\\w+)&marks=(\\d+)', request).groups() if match: post_data = match name, mark = post_data[0], int(post_data[1]) if name in student_marks: student_marks[name].append(mark) else: student_marks[name] = [] student_marks[name].append(mark) response = \"HTTP/1.1 302 Found\\r\\nLocation: /\" else: response = \"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\" else: response = \"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\" return response def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 1337)) server_socket.listen(5) signal.signal(signal.SIGINT, signal.SIG_DFL) print(\"Server is listening on port 1337...\") while True: client_socket, client_address = server_socket.accept() print(f\"Accepted connection from {client_address}\") request = client_socket.recv(1024).decode('utf-8') response = handle_request(request) client_socket.sendall(response.encode('utf-8')) client_socket.close() if __name__ == \"__main__\": main() \u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b","title":"Task 5"},{"location":"task5/#_1","text":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 web-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST http \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Python \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket. \u0417\u0430\u0434\u0430\u043d\u0438\u0435: \u0441\u0434\u0435\u043b\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440, \u043a\u043e\u0442\u043e\u0440\u044b\u0439 \u043c\u043e\u0436\u0435\u0442: * \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. * \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u0430\u0445 \u043f\u043e \u0434\u0441\u0438\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0432 \u0432\u0438\u0434\u0435 html-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.","title":"\u0417\u0430\u0434\u0430\u0447\u0430"},{"location":"task5/#_2","text":"server.py import socket import re import signal student_marks = { \"Bob\": [85], \"Tom\": [92], \"Shlick-Shlack\": [78], } html_template = \"\"\" <!DOCTYPE html> <html> <head> <title>Student Marks</title> </head> <body> <h1>Student Marks</h1> <ul> {student_list} </ul> <form method=\"post\" action=\"/\"> <label for=\"name\">Name:</label> <input type=\"text\" id=\"name\" name=\"name\" required> <label for=\"marks\">Marks:</label> <input type=\"number\" id=\"marks\" name=\"marks\" required> <input type=\"submit\" value=\"Submit\"> </form> </body> </html> \"\"\" def generate_student_list(): student_list = \"\" for name, marks in student_marks.items(): mark_str = ', '.join(map(str, marks)) student_list += f'<li> {name} : {mark_str}' return student_list def handle_request(request): print(request) if request.startswith(\"GET\"): response_body = html_template.format(student_list=generate_student_list()) response = f\"HTTP/1.1 200 OK\\r\\nContent-Length: {len(response_body)}\\r\\n\\r\\n{response_body}\" elif request.startswith(\"POST\"): match = re.search(r'name=(\\w+)&marks=(\\d+)', request).groups() if match: post_data = match name, mark = post_data[0], int(post_data[1]) if name in student_marks: student_marks[name].append(mark) else: student_marks[name] = [] student_marks[name].append(mark) response = \"HTTP/1.1 302 Found\\r\\nLocation: /\" else: response = \"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\" else: response = \"HTTP/1.1 400 Bad Request\\r\\nContent-Length: 0\\r\\n\\r\\n\" return response def main(): server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM) server_socket.bind(('localhost', 1337)) server_socket.listen(5) signal.signal(signal.SIGINT, signal.SIG_DFL) print(\"Server is listening on port 1337...\") while True: client_socket, client_address = server_socket.accept() print(f\"Accepted connection from {client_address}\") request = client_socket.recv(1024).decode('utf-8') response = handle_request(request) client_socket.sendall(response.encode('utf-8')) client_socket.close() if __name__ == \"__main__\": main()","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f"},{"location":"task5/#_3","text":"","title":"\u0414\u0435\u043c\u043e\u043d\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u0440\u0430\u0431\u043e\u0442\u044b"}]}